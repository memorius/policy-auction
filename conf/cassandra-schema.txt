
/* TODO: set replication_factor to 3 once we have an actual cluster */
create keyspace policy_auction
    with placement_strategy = 'org.apache.cassandra.locator.SimpleStrategy'
    and strategy_options=[{replication_factor:1}];

use policy_auction;

create column family policies
    with comment = 'Policies keyed by policyID, and votes given them by each user'
    and key_validation_class = TimeUUIDType
    and comparator = UTF8Type
    and column_metadata = [{
            column_name: short_name,
            validation_class: UTF8Type
        }, {
            column_name: description,
            validation_class: UTF8Type
        }, {
            column_name: state,
            validation_class: UTF8Type
        }, {
            column_name: owner,
            validation_class: TimeUUIDType
        }, {
            column_name: portfolio,
            validation_class: UTF8Type
        }, {
            column_name: rationale,
            validation_class: UTF8Type
        }, {
            column_name: costs_to_taxpayers,
            validation_class: UTF8Type
        }, {
            column_name: who_affected,
            validation_class: UTF8Type
        }, {
            column_name: how_affected,
            validation_class: UTF8Type
        }, {
            column_name: is_party_official,
            validation_class: BytesType
        }, {
            column_name: last_edited,
            validation_class: LongType
        }, {
            column_name: state_changed,
            validation_class: LongType
        }
    ];

create column family portfolios
    with comment = 'Portfolios keyed by portfolioID'
    and key_validation_class = UTF8Type
    and comparator = UTF8Type
    and column_metadata = [{
            column_name: name,
            validation_class: UTF8Type
        }, {
            column_name: description,
            validation_class: UTF8Type
        }
    ]
    and keys_cached = 1.0
    and rows_cached = 1.0
    and key_cache_save_period = 0
    and row_cache_save_period = 0;

create column family users
    with comment = 'Users by userID'
    and comparator = UTF8Type
    and column_metadata = [{
            column_name: username,
            validation_class: UTF8Type
        }, {
            column_name: email,
            validation_class: UTF8Type
        }, {
            column_name: password_hash,
            validation_class: UTF8Type
        }, {
            column_name: first_name,
            validation_class: UTF8Type
        }, {
            column_name: last_name,
            validation_class: UTF8Type
        }, {
            column_name: show_real_name,
            validation_class: BytesType
        }, {
            column_name: created_timestamp,
            validation_class: LongType
        }, {
            column_name: password_expiry_timestamp,
            validation_class: LongType
        }, {
            column_name: vote_salary_last_paid_timestamp,
            validation_class: LongType
        }, {
            column_name: vote_salary_date,
            validation_class: LongType
        }
    ];

create column family users_by_name
    with comment = 'Lookup of userID by user name'
    and comparator = UTF8Type
    and column_metadata = [{
            column_name: user_id,
            validation_class: TimeUUIDType
        }
    ];

create column family users_pending
    with comment = 'Lookup of new userIDs and their activation codes'
    and comparator = UTF8Type
    and column_metadata = [{
            column_name: activation_code,
            validation_class: UTF8Type
        }
    ];

create column family user_roles
    with comment = 'Roles attached to a userID'
    and comparator = UTF8Type
    and column_metadata = [{
            column_name: user_role,
            validation_class: UTF8Type
        }
    ];

create column family user_policy_votes_pending
    with comment = 'Per-user vote records awaiting propagation to policy_current_votes'
    and key_validation_class = TimeUUIDType
    and comparator = TimeUUIDType
    and default_validation_class = UTF8Type
    and keys_cached = 1000
    and rows_cached = 0
    and key_cache_save_period = 0
    and row_cache_save_period = 0;

create column family user_policy_votes
    with comment = 'Per-user vote records which have been propagated to policy_current_votes'
    and key_validation_class = TimeUUIDType
    and comparator = TimeUUIDType
    and default_validation_class = UTF8Type
    and keys_cached = 1000
    and rows_cached = 0
    and key_cache_save_period = 0
    and row_cache_save_period = 0;

create column family memcache_string
    with comment = 'Single-row lookup tables for in-memory small datasets, with string-named columns'
    and key_validation_class = UTF8Type
    and comparator = UTF8Type
    and default_validation_class = BytesType
    and keys_cached = 1.0
    and rows_cached = 1.0
    and key_cache_save_period = 0
    and row_cache_save_period = 0;

create column family memcache_timeuuid
    with comment = 'Single-row lookup tables for in-memory small datasets, with TimeUUID-named columns'
    and key_validation_class = UTF8Type
    and comparator = TimeUUIDType
    and default_validation_class = BytesType
    and keys_cached = 1.0
    and rows_cached = 1.0
    and key_cache_save_period = 0
    and row_cache_save_period = 0;

create column family misc_string
    with comment = 'Single-row lookup tables for non-in-memory datasets, with string-named columns'
    and key_validation_class = UTF8Type
    and comparator = UTF8Type
    and default_validation_class = BytesType
    and keys_cached = 1.0
    and rows_cached = 0
    and row_cache_save_period = 0
    and key_cache_save_period = 0
    and row_cache_save_period = 0;


/* TODO: set replication_factor to 2 once we have an actual cluster */
create keyspace policy_auction_logs
    with placement_strategy = 'org.apache.cassandra.locator.SimpleStrategy'
    and strategy_options=[{replication_factor:1}];

use policy_auction_logs;

create column family log
    with comment = 'Application log'
    and column_type = Super
    and key_validation_class = UTF8Type
    and comparator = TimeUUIDType
    and subcomparator = UTF8Type
    and default_validation_class = UTF8Type
    and read_repair_chance = 1.0
    and keys_cached = 100
    and rows_cached = 0
    and key_cache_save_period = 0
    and row_cache_save_period = 0;
